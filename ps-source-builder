#!/usr/bin/env bash
# extglob is needed for the call to tar in the binary build
shopt -s extglob

# Usage info
show_help() {
    cat << EOF
    Usage: ${0##*/} [-b DEBIAN_BRANCH] [-t DEBIAN_TAG] [-s] [-u] [REPO]
    This script builds a perfSONAR package out of a git REPO.
    The build happens for the $DIST Debian distro (\$DIST should be set in your ENV).

    Arguments understood:
        -b: git debian branch to build from (default to master)
            (upstream is read from gbp.conf)
        -k: keep locally built packages (can be useful to solve dependencies)
        -s: build only the source package
        -t: git tag to build from (defaults no tag), overrides any -b arg
            (upstream is read from gbp.conf)
        -u: don't checkout nor update the local git repository
            (useful for subsequent builds with no change to sources)

    Some examples:
    ./ps-cowbuilder-build -b 4.2.1 toolkit
    ./ps-cowbuilder-build -t debian/stretch/4.2.1 toolkit
    package=pscheduler-archiver-esmond ./ps-cowbuilder-build -b 4.3.0 pscheduler
EOF
#    Other examples: to rebuild everything in the local repo:
#    for p in `ls -al pscheduler/source/ | awk '/pscheduler/ {print $9}' | grep -vE "pscheduler-(docs|rpm)" | sort -r`; do package=$p ./ps-cowbuilder-build -b 4.3.0 pscheduler; done
#    for p in jq python-icmperror python-jsonschema python-jsontemplate python-pyjq python-pyrsistent python-radix python-pscheduler `ls pscheduler/source | grep -E "^pscheduler" | grep -v "pscheduler-rpm"`; do package=$p ./ps-cowbuilder-build -b debian-python-3 pscheduler; done
}

# Defaults
# Repository to get source from
REPO_LOC='/mnt/build/'
BUILD_SRC=${REPO_LOC}'build_source'
BUILD_RESULTS=${REPO_LOC}'build_results'
mkdir -p ${BUILD_SRC}
mkdir -p ${BUILD_RESULTS}
# Checked out source directory
SRC_DIR='source'
cd ${BUILD_SRC}

# Default values
branch='master'
unset tag
unset source_only
git_update=true
keep_builds=false

# Parsing options
while getopts "b:t:ksu" OPT; do
    case $OPT in
        b) branch=$OPTARG ;;
        k) keep_builds=true ;;
        s) source_only=true ;;
        t) tag=$OPTARG ;;
        u) unset git_update ;;
        '?')
            show_help >&2
            exit 1 ;;
    esac
done
shift $((OPTIND-1))

# Check if we still have an argument left
if [ $# -gt 0 ]; then
    REPO=$1
fi
if [ -z "$REPO" ]; then
    show_help >&2
    exit 1
fi

# Keep previous builds?
if ! $keep_builds ; then
    rm -rf $REPO/!(source)
fi

# Do we have a tag?
if [ -z "$tag" ]; then
    # We don't have a tag, we build a snapshot from $branch
    export branch
    DIST="${branch##*\/}"
else
    # We have a tag, say we will build from it
    tagl="${tag#*\/}"
    DIST="${tagl%%\/*}"
    export tag
fi

# Do we want to clone the repo or do we have it already existing?
if $git_update ; then
    # Checkout source from local dev repo and merge upstream branch into ${DEBIAN_BRANCH}
    rm -rf "${REPO}"
    git clone "${REPO_LOC}${REPO}" "${REPO}/${SRC_DIR}"
    cd "${REPO}/${SRC_DIR}"
    if [ -n "$tag" ] ; then
        branch=`git branch --contains "tags/${tag}" | awk '{print $2}'`
    fi
    git checkout "$branch"
elif [[ -d "${REPO}/${SRC_DIR}" && ${branch} ]]; then
    echo "I'm using the existing ${REPO} directory."
    cd "${REPO}/${SRC_DIR}/.."
    rm -f .git
    mv "${SRC_DIR}/.git" .
    rm -rf *
    mkdir -p "${SRC_DIR}"
    cd "${SRC_DIR}"
    mv ../.git .
    git checkout -B "${branch}"
    git checkout -- *
else
    echo "You asked me to reuse the existing ${REPO} directory but it doesn't seem right."
    exit 1
fi

# Announce what we'll do!
echo -e "\nBuilding \033[1;32m${REPO}\033[0;37m from branch \033[1;36m${branch}\033[0;37m on \033[1;32m${ARCHES}\033[0;37m.\n"
[ $tag ] && echo -e "\033[1;32mThis is a \033[1;33mrelease\033[1;32m, tag \033[1;33m${tag}\033[1;32m will be built !\033[0m\n"
# TODO: keep local packages somewhere
if $keep_builds ; then
    echo "To solve dependencies, I will also use packages from /var/cache/pbuilder/$DIST/result if any."
else
    rm -rf /var/cache/pbuilder/result/$DIST/*
fi

cd ..
# Build the source package
${REPO_LOC}/distribution/debian/build-source-package.sh
[ $? -eq 0 ] || exit 1

PKG=`awk '/^Source:/ {print $2}' *.dsc`
VERSION=`awk '/^Version:/ {print $2}' *.dsc`

if [ ${source_only} ]; then
    echo
    echo -e "I have built the source package for \033[1;32m${PKG}\033[0m at \033[1;32m${VERSION}\033[0m and you asked me to stop.\n"
    exit 1
fi

