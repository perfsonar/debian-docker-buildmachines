#!/usr/bin/env bash
# extglob is needed for the call to tar in the binary build
shopt -s extglob

# Arg must be the git repo to build
GITREPO=$1

# Defaults
# Repository to get source from
REPO_LOC='/mnt/build/'
BUILD_SRC=${REPO_LOC}'build_source'
BUILD_RESULTS=${REPO_LOC}'build_results'
SRC_DIR='source'
BUILD_DIR='binary'
# Go where the source package is
cd ${BUILD_SRC}/${GITREPO}

# Announce what we'll do!
# We get $BUILD_ARCH, $DIST and $RELEASE from the content of the source package
. ${REPO_LOC}/debian-docker-buildmachines/check-release-repo.sh
[ $? -eq 0 ] || exit 1

# Check build architecture
if [[ `uname -m` != "x86_64" && "$BUILD_ARCH" == "all" ]]; then
    echo "I only build binary independent package on amd64. I'll skip this build."
    exit 0
fi

# Setup local repository if we have one
if  [ -d ${BUILD_RESULTS}/ ]; then
    /usr/local/bin/ps-local-repo ${BUILD_RESULTS}/
fi

# Extract source package
mkdir -p $BUILD_DIR
if grep -q '(native)' *.dsc ; then
    echo "This is a Debian native package, there is no orig tarball."
    tar -x -C $BUILD_DIR --strip-components 1 -f *.tar.xz
else
    tar -x -C $BUILD_DIR --strip-components 1 -f *.orig.*
    tar -x -C $BUILD_DIR -f *.debian.*
fi
cd $BUILD_DIR

# If we were given an second argument, we run it as a command, cheap debugging
if [ "$2" ]; then
    echo -e "\n\033[1;33mWe've been given a second argument, we'll run it instead of the build command.\033[0m\n"
    $2
    exit
fi

# Install build dependencies
sudo mk-build-deps --install --tool 'apt-get --yes --no-install-recommends -o Debug::pkgProblemResolver=yes' --remove
# Alternative: `apt build-dep ./`

# Build binary package without signing
# TODO: for Jenkins, we'll want signing!
if [ `uname -m` == "x86_64" ]; then
    # Only run lintian on amd64 (automatically called from debuild)
    debuild -rfakeroot -i -us -uc -sa -b
else
    # Calling directly dpkg-buildpackage on other ARCHES so we don't run Lintian that seems to have an issue when running under QEMU
    dpkg-buildpackage -rfakeroot -us -uc -i -sa -b
fi

if [ $? -eq 0 ]; then
    # We copy the resulting packages back to the main host
    echo -e "\n\033[1;32mBuild succeeded, the resulting packages will be copied to the shared volume ${BUILD_RESULTS}\033[0m\n"
    cp -afv ../!(${SRC_DIR}|${BUILD_DIR}) ${BUILD_RESULTS}

    # And create a Packages file to serve as a local deb repo
    echo -en "\nUpdating the APT local repository Packages content (in ${BUILD_RESULTS})"
    (cd ${BUILD_RESULTS}; apt-ftparchive packages . > Packages)
    echo "."
else
    echo -e "\n\033[1;33mSomething went wrong, package not built!\033[0m\n"
    exit 1
fi

