#!/usr/bin/env bash

# Usage info
show_help() {
    cat << EOF
    Usage: ${0##*/} [-o OSname]
    This script will build the package from the current repository using Unibuild.
    Requirements:
        - The source branch to build from need to be checked out
        - Functionnal docker buildx setup
        - Needs at least 2 sudoers whitelisting to be able to run under Jenkins.

    Defaults values:
        - Support OS dependants builds on D10 and U20 (only packages needed to be compiled specifically
          on these OS are going to be tailored built.
        - Solves build and installation dependencies from the perfsonar-minor-snapshot repository
        - Build on all 4 arches we support for Debian and Ubuntu: amd64, arm64, armhf and ppc64el
        - Use the docker-compose-unibuild.yml setup from the docker-debian-buildmachines repo
        - Build the current directory

    Arguments understood:
        -o OS to build on (defaults to u18, the oldes OS we support), needs to be in lower case
           short form like d11 or u22

    Environment variables that can be set:
        - limit the number of arches built, ex: ARCHES='linux/arm64 linux/amd64'
        - build for a different set of other OSes: OSes="d11 u22"
        - use a different pS repository to solve dependencies: REPO="perfsonar-5.0-staging"
        - use a different Docker compose file: COMPOSE_FILE="path/to/compose-file.yml"
        - build a given directory: DIR_TO_BE_BUILT="/full/path/dir/to/be/built"
        - some Unibuild options: UNIBUILD_OPTS
          
    Some examples:
    ../debian-docker-buildmachines/build-with-unibuild
    ARCHES='linux/arm64 linux/amd64' ../debian-docker-buildmachines/build-with-unibuild
EOF
}

### Constants
if [ -z "$REPO" ]; then
    REPO=perfsonar-minor-snapshot
fi
MY_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
if [ -z "$UNIBUILD_OPTS" ]; then
    # Make sure it is defined
    UNIBUILD_OPTS=""
fi
if [ -z "$COMPOSE_FILE" ]; then
    # We use Docker compose file that goes along this script.
    COMPOSE_FILE="${MY_DIR}/docker-compose-unibuild.yml"
fi
if [ -z "$DIR_TO_BE_BUILT" ]; then
    # The git repository we will build, we're supposed to be running from it.
    # This is used in the Docker compose file to mount as volume
    DIR_TO_BE_BUILT=`pwd`
fi
PROJECT=${DIR_TO_BE_BUILT##*\/}
BUILD_DIR='multiarch_build'
FULL_BUILD_DIR="${DIR_TO_BE_BUILT}/$BUILD_DIR"
RESULTS_DIR='unibuild-repo'
CONTAINER_UPDATE_SCRIPT=" export DEBIAN_FRONTEND=noninteractive && \
    curl -s http://downloads.perfsonar.net/debian/$REPO.gpg.key | apt-key add - && \
    curl -s -o /etc/apt/sources.list.d/$REPO.list http://downloads.perfsonar.net/debian/$REPO.list && \
    apt-get update && \
    echo && echo "

# Variables and options
# Main build OS (should be oldest supported)
OS=u18
# Parsing options
while getopts "ho:" OPT; do
    case $OPT in
        o) OS="$OPTARG" ;;
        h)
            show_help >&2
            exit 1 ;;
    esac
done
shift $((OPTIND-1))

if [[ ! "$OS" =~ ^(d10|d11|u18|u20|u22)$ ]]; then
    echo "OS $OS not supported for build"
    exit 1
fi
# Other OS to check for building packages
if [ -z "$OSes" ]; then
    OSes="d10 u20"
fi
export OS OSes REPO COMPOSE_FILE DIR_TO_BE_BUILT

# By default, the setup is to build packages for all the supported architectures
# If you want to build for different ones, you should call the scripts with the ARCHES
# variable set similarily to (here for all valid and supported architectures):
# ARCHES='linux/amd64' ./build-with-unibuild
# ARCHES='linux/amd64 linux/arm64' ./build-with-unibuild
if [ -z "$ARCHES" ]; then
    ARCHES='linux/amd64 linux/arm64 linux/armv7 linux/ppc64le'
fi
if [ `uname -m` == "x86_64" ]; then
    MY_ARCH="amd64"
else
    echo "Building on a host other than x86_64 is currently not supported"
    exit 1
    # TODO: We should support running on arm64 architecture (Apple Silicon Macs for example)
fi

### Some local subs
# Clean up
clean_up() {
    # Shutdown all containers
    docker compose down --remove-orphans
    docker volume prune -f
}

# Fail
fail() {
    msg=$1
    echo -e "\n\033[1;31mUnrecoverable error!\033[0m"
    echo -e "$1\n"
    # TODO: Can we add a debug option to drop into a shell inside the container when an error occurs?
    clean_up
    exit 1
}

# Build foreign architectures, a local function to avoid duplicate code
build_foreign() {
    local OS="$1"
    local p="$2"
    local P_DIR="${RESULTS_DIR}"
    if [ $# -eq 3 ]; then
        P_DIR="$3/unibuild-work/products"
    fi
    # Extract source package
    # sudoers configuration needed for this to work
    sudo /bin/rm -rf ${FULL_BUILD_DIR} || fail "Cannot remove previous ${FULL_BUILD_DIR} dir, check your sudo rules."
    mkdir -p ${FULL_BUILD_DIR} || fail "Cannot setup an empty ${FULL_BUILD_DIR} dir."
    echo -e "\n# Extracting ${p} in ${BUILD_DIR} to see if we must build it on other architectures."
    # We take the newest entry, latest built package
    dsc=`ls -1t ${P_DIR}/${p}*.dsc | head -1`
    if head -1 $dsc | grep -q '(native)' ; then
        echo "This is a Debian native package, there is no orig tarball."
        cat ${dsc%.dsc}.debian.tar.xz | tar -Jx -C $BUILD_DIR --strip-components 1 -f -
    else
        cat ${dsc%-*}.orig.* | tar -zx -C $BUILD_DIR --strip-components 1 -f -
        cat ${dsc%.dsc}.debian.tar.xz | tar -Jx -C $BUILD_DIR -f -
    fi

    for ARCH in ${ARCHES[@]}; do
        LARCH="${ARCH#*\/}"
        LARCH="${LARCH/\/}"
        if [[ $LARCH != "$MY_ARCH" ]]; then
            if grep '^Architecture: ' $BUILD_DIR/debian/control | grep -qv 'Architecture: all'; then
                # We need to build this package for all architectures
                echo -e "\n===== Building \033[1mbinary package ${p}\033[0m on \033[1m${ARCH}\033[0m in \033[1m${OS}_${LARCH}\033[0m container ====="
                # TODO: can we run all ARCHES builds in parallel?
                docker compose exec -T ${OS}_${LARCH} bash -c "\
                    cd $BUILD_DIR && \
                    mk-build-deps --install --tool 'apt-get --yes --no-install-recommends -o Debug::pkgProblemResolver=yes' --remove && \
                    dpkg-buildpackage -us -uc -i -sa -b && \
                    MYARCH=\$(dpkg --print-architecture) && \
                    cd .. && \
                    ls -la *_\${MYARCH}.* && \
                    apt-get -y install ./*_\${MYARCH}.deb && \
                    echo && echo Collecting files from $p ... && \
                    for f in *_\${MYARCH}.*; do mv \${f} ${RESULTS_DIR}; done && \
                    echo '   ... done.' && echo \
                    "
            else
                # Installing packages might be needed to make sure dependencies are satisfied
                # Alternative would be to push packages to repository after each build instead of at the very end
                # Or use a prepopulated snapshot repo
                # But for now we do nothing (and that seems fine)
                echo -e "\033[1mWe don't need to build ${p} for ${ARCH}.\033[0m Let's skip it."
            fi
        fi
    done
    # TODO: we should also update the local Unibuild repository
    # and make sure it keeps versions of the different packages for rebuilds and multi-arch
    echo
}

### Main
# Launch all foreign ARCH containers
CONTAINERS=""
for ARCH in ${ARCHES[@]}; do
    LARCH="${ARCH#*\/}"
    if [[ $LARCH != "$MY_ARCH" ]]; then
        CONTAINERS+=${OS}_${LARCH/\/}" "
        for LOS in ${OSes[@]}; do
            CONTAINERS+=${LOS}_${LARCH/\/}" "
        done
    fi
done
if [ -n "$CONTAINERS" ]; then
    docker compose up -d $CONTAINERS || fail "Cannot start containers, please look at your Docker daemon."
    echo -e "\n\033[1mAdding the perfSONAR repository to all containers (background task)…\033[0m\n"
    for CONTAINER in ${CONTAINERS[@]}; do
        # Running in the background, while we'll make the master builds
        docker compose exec -dT ${CONTAINER} bash -c "$CONTAINER_UPDATE_SCRIPT" || fail "Cannot exec the update script in ${CONTAINER}."
    done
fi

# TODO: this should probably be better done by Unibuild itself
# The solution devised here is not working for an empty perfSONAR repository.
# This is because we would need to first build packages that those packages depends on
# And these build need to go through the regular Unibuild process
# Currently (20230328) the packages that need to be built first are: ethr, jq, oniguruma and python-vine
sudo rm -f ${RESULTS_DIR}/unibuild/* || fail "Cannot empty ${RESULTS_DIR}/unibuild/ dir, check your sudo rules."

echo -e "\n\033[1mFirst loop on all additonal OSes\033[0m (${OSes[@]}) \033[1mthat need specially crafted packages.\033[0m"
# We get the list from all Makefile using the OS_PACKAGING macro
# plus a diff between the unibuild-order on the main OS and the OSes, excluding the already listed packages
# And we add a trailing @ suffix with the OS on which to build
# TODO: How to make sure they are built in the correct order in case of dependencies?
find . -name Makefile -exec grep -q "(OS_PACKAGING),deb" {} \; -ls | sed 's|.*\./\(.*\)/Makefile|\1|' > os-specific-packages
pos=$(docker compose run --rm -T ${OS}_${MY_ARCH} bash -c "\
                unibuild order > uorder-mine; \
                opp=\$(grep -f os-specific-packages uorder-mine | xargs); \
                for otherOS in ${OSes}; do \
                    [ \"\${otherOS:0:1}\" == \"d\" ] && myDISTRO=Debian; \
                    [ \"\${otherOS:0:1}\" == \"u\" ] && myDISTRO=Ubuntu; \
                    unibuild --define DISTRO=\$myDISTRO --define MAJOR=\${otherOS:1:2} order > uorder-other; \
                    for p in \${opp}; do \
                        grep \$p uorder-other | sed \"s/\(.*\)/\1@\$otherOS/\"; \
                    done; \
                    diff uorder-mine uorder-other | grep -v -f os-specific-packages | awk -v os=\"\$otherOS\" '/^> / {printf \"%s@%s\n\",\$2,os;}'; \
                    diff uorder-mine uorder-other | grep -v -f os-specific-packages | awk '/^> / {print \$2}' >> os-specific-packages; \
                done; \
                rm -f uorder-mine uorder-other os-specific-packages")
if [ -z "$pos" ]; then
    echo -e "No specially crafted package needed."
else
    echo -e "We're going to build the following packages first:\n$pos"
fi
for po in $pos; do
    # Package name and OS on which to build
    package=${po%@*}
    otherOS=${po#*@}
    # Build each package on main architecture first
    echo -e "\n===== Building package \033[1m${package}\033[0m in \033[1m${otherOS}_${MY_ARCH}\033[0m container ====="
    # This is not ideal to run the CONTAINER_UPDATE_SCRIPT each time we build a package,
    # TODO: but that's the only way to collect the return code (run vs exec).  :-/
    docker compose run --rm -T ${otherOS}_${MY_ARCH} bash -c "$CONTAINER_UPDATE_SCRIPT && \
        unibuild $UNIBUILD_OPTS build --start ${package} --stop ${package} \
        "
    if [ $? -ne 0 ]; then
        fail "Something went wrong with Unibuild on ${otherOS}_${MY_ARCH} for package ${package}, I'll stop here."
    fi
    # The resulting package name is not the package dirname
    result=`head -1 ${RESULTS_DIR}/unibuild/debian-package-order`
    # We now need to build it on foreign architectures
    build_foreign ${otherOS} ${result} ${package} || fail "Something went wrong building foreign arch package for ${result} from ${package}"
    # Remove leftovers to not confuse the next build
    sudo rm -f ${RESULTS_DIR}/unibuild/* || fail "Cannot empty ${RESULTS_DIR}/unibuild/ dir, check your sudo rules."
done

# Special cases to skip installing opensearch in a Unibuild container as it currently fails as missing systemd
if [[ "${PROJECT}" =~ ^(archive|bundles|toolkit)$ ]]; then
    UNIBUILD_SEQ="make clean && unibuild $UNIBUILD_OPTS make && mkdir /app/unibuild-repo && unibuild gather /app/unibuild-repo"
else
    UNIBUILD_SEQ="unibuild $UNIBUILD_OPTS build"
fi
# Add pS repo (see TODO in otherOS loop above) and make the master build on the main OS with unibuild
echo -e "\n===== \033[1mStarting the main full ${PROJECT} Unibuild build in ${OS}_${MY_ARCH} container\033[0m =====\n"
docker compose run --rm -T ${OS}_${MY_ARCH} bash -c "$CONTAINER_UPDATE_SCRIPT && \
    ${UNIBUILD_SEQ}"
if [ $? -ne 0 ]; then
    fail "Something went wrong with Unibuild, I'll stop here."
fi
echo -e "\n\n*** Unibuild: done! ***\n"

# Then loop on all packages from the unibuild/build-order file
# to see which one we need to build on foreign architectures
for p in `cat ${RESULTS_DIR}/unibuild/debian-package-order`; do
    build_foreign ${OS} ${p} || fail "Something went wrong building foreign arch package for ${p}"
done

echo -e "\n*** All done! ***\n"
clean_up

